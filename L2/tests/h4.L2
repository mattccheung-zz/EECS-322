
(:printArray
 ;; (:test
 ;;  0 0
 ;;  ; test
 ;;  (rdi <- 5) ; size 2 array
 ;;  (rsi <- 15) ; of int = 7
 ;;  (call allocate 2)
  
 ;;  (rdi <- 7) ; size 3 array
 ;;  (rsi <- rax) 
 ;;  (call allocate 2)
 ;;  (rdi <- rax)
 ;;  ((mem rdi 16) <- 5) ; put 2 in second position
 ;;  ((mem rsp -8) <- :test_ret)
 ;;  (call :printArray 1)
 ;;  :test_ret
 ;;  (return)
 ;;  )
 (:printArray
  1 0
  ; Check if array
  (maybe_arr <- rdi)
  (maybe_arr <<= 63) ; if zero -> mem, otherwise int
  (cjump maybe_arr = 0 :isarr :isnotarr)

  :isnotarr
  (rax <- 1)
  (goto :end)
  
  :isarr
  (array <- rdi)
  (length <- (mem array 0)) ; get array size
  (i <- 0) ; counter
  :loop
  (cjump i < length :body :end)
  :body
  (rdi <- array) ; array ptr
  (i <- r12) ; index
  ((mem rsp -8) <- :printArrayElement_ret)
  (call :printArrayElement 2)
  :printArrayElement_ret
  (i++)
  (goto :loop)

  :end
  (rax <- 3)
  (return)
  )

 (:printArrayElement
  2 2
  (array <- rdi)
  (index <- rsi)
  (index++) ;; base 1 idx
  
  ;; print the index
  (array @ array index 8)
  (maybe_arr <- (mem rdi 0))
  
  ;; print idx
  (rdi <- index)
  (rdi--)
  (rdi <<= 1)
  (rdi++)
  (call print 1)

  ;; print offset
  (rdi <- r13)
  (rdi *= 8)
  (rdi <<= 1)
  (rdi++)
  (call print 1)
  
  ;; check if array
  (rdi <- maybe_array)
  (check <- maybe_array)
  (check <<= 63) ; if zero -> mem, otherwise int
  (cjump check = 0 :isarr_2 :isnotarr_2)

  :isnotarr_2
  (call print 1)
  (goto :exit_2)
  
  :isarr_2
  ((mem rsp -8) <- :printArray_ret)
  (call :printArray 1)
  :printArray_ret                       

  :exit_2
  (return)
  )
 )
